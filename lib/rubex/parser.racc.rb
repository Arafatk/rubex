#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 19)
def parse file_name
  @lexer = Rubex::Lexer.new
  @lexer.parse_file file_name
end

def next_token
  @lexer.next_token
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,     4,     5,     6,     3 ]

racc_action_check = [
     0,     1,     2,     4,     5 ]

racc_action_pointer = [
    -7,     1,    -3,   nil,     3,    -3,   nil,   nil ]

racc_action_default = [
    -2,    -5,    -1,    -4,    -5,    -5,     8,    -3 ]

racc_goto_table = [
     2,     1,   nil,   nil,   nil,     7 ]

racc_goto_check = [
     2,     1,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 9, :_reduce_none,
  0, 9, :_reduce_2,
  3, 10, :_reduce_3,
  1, 10, :_reduce_none ]

racc_reduce_n = 5

racc_shift_n = 8

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  :DIGIT => 7 }

racc_nt_base = 8

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "DIGIT",
  "$start",
  "target",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.racc', 8)
  def _reduce_2(val, _values, result)
     result = 0; puts result 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 10)
  def _reduce_3(val, _values, result)
     result += val[2]; puts result 
    result
  end
.,.,

# reduce 4 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
