class Rubex::Parser
token 
  kDEF kEND kRETURN kDTYPE_I32 tLPAREN tRPAREN tIDENTIFIER tPLUS tNL tCOMMA

prechigh
  left tPLUS
preclow

rule

  program:
    stmts { }

  stmts:
    stmt tNL { result = Node.new(val[0]) }
  | { }

  stmt: 
    kDEF fname f_arglist stmts kEND { result = MethodDef.new(val[1], val[2], val[3]) } #method definition
  | kRETURN expr {}

  fname:
    tIDENTIFIER {}

  f_arglist:
    tLPAREN f_args tRPAREN tNL { }

  f_args: 
    f_args f_normal_arg {}
  | f_arg {}
  | {}

  f_arg:
    f_arg tCOMMA f_normal_arg {} 
  | f_normal_arg {}

  f_normal_arg:
    kDTYPE_I32 tIDENTIFIER { }

  expr:
    tIDENTIFIER tPLUS tIDENTIFIER {}
end

---- header
require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

---- inner
def parse file_name
  @lexer = Rubex::Lexer.new
  @lexer.parse_file file_name
end

def next_token
  @lexer.next_token
end
