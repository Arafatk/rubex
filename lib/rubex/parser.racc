class Rubex::Parser
token 
  kDEF kEND kRETURN kDTYPE_I32 tLPAREN tRPAREN tIDENTIFIER tPLUS tNL tCOMMA

prechigh
  left tEXPO
  left tMULTIPLY tDIVIDE tMODULUS
  left tPLUS tMINUS

  right tEQUAL
preclow

rule

  program:
    stmts { result = Node.new(val) }

  stmts:
    stmts stmt tNL { result = [val[0], val[1]] }
  | stmt tNL { result = [val[0]] }
  
  stmt: 
    kDEF fname f_arglist stmts kEND 
      { 
        result = MethodDef.new(val[1], val[2])
        result.add_statements val[3]
      }
  | kRETURN expr { result = Statement::Return.new val[1] }
  | {}

  fname:
    tIDENTIFIER {}

  f_arglist:
    tLPAREN f_args tRPAREN tNL { result = val[1] }

  f_args:
    f_args tCOMMA f_normal_arg 
      { 
        result = ArgumentList.new
        result.push val[2]
        result.push val[0]
      } 
  | f_normal_arg { }

  f_normal_arg:
    kDTYPE_I32 tIDENTIFIER { result = CBaseType.new val[0], val[1] }

  expr:
    tIDENTIFIER tPLUS tIDENTIFIER { result = Expression::Addition.new val[0], val[2] }
end

---- header
require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

---- inner
def parse file_name
  @lexer = Rubex::Lexer.new
  @lexer.parse_file file_name
end

def next_token
  @lexer.next_token
end
